/* soapSealingServicesBindingService.h
   Generated by gSOAP 2.7.16 from IRM.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapSealingServicesBindingService_H
#define soapSealingServicesBindingService_H
#include "soapH.h"
class SOAP_CMAC SealingServicesBindingService : public soap
{ public:
	/// Constructor
	SealingServicesBindingService();
	/// Constructor with copy of another engine state
	SealingServicesBindingService(const struct soap&);
	/// Constructor with engine input+output mode control
	SealingServicesBindingService(soap_mode iomode);
	/// Constructor with engine input and output mode control
	SealingServicesBindingService(soap_mode imode, soap_mode omode);
	/// Destructor, also frees all deserialized data
	virtual ~SealingServicesBindingService();
	/// Delete all deserialized data (uses soap_destroy and soap_end)
	virtual	void destroy();
	/// Initializer used by constructor
	virtual	void SealingServicesBindingService_init(soap_mode imode, soap_mode omode);
	/// Create a copy
	virtual	SealingServicesBindingService *copy();
	/// Force close connection (normally automatic)
	virtual	int soap_close_socket();
	/// Return sender-related fault to sender
	virtual	int soap_senderfault(const char *string, const char *detailXML);
	/// Return sender-related fault with SOAP 1.2 subcode to sender
	virtual	int soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML);
	/// Return receiver-related fault to sender
	virtual	int soap_receiverfault(const char *string, const char *detailXML);
	/// Return receiver-related fault with SOAP 1.2 subcode to sender
	virtual	int soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML);
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
	virtual	void soap_stream_fault(std::ostream&);
	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Run simple single-thread iterative service on port until a connection error occurs (returns error code or SOAP_OK), use this->bind_flag = SO_REUSEADDR to rebind for a rerun
	virtual	int run(int port);
	/// Bind service to port (returns master socket or SOAP_INVALID_SOCKET)
	virtual	SOAP_SOCKET bind(const char *host, int port, int backlog);
	/// Accept next request (returns socket or SOAP_INVALID_SOCKET)
	virtual	SOAP_SOCKET accept();
	/// Serve this request (returns error code or SOAP_OK)
	virtual	int serve();
	/// Used by serve() to dispatch a request (returns error code or SOAP_OK)
	virtual	int dispatch();

	///
	/// Service operations (you should define these):
	///

	/// Web service operation 'Seal' (returns error code or SOAP_OK)
	virtual	int Seal(_ns4__Seal *ns4__Seal, _ns4__SealResponse *ns4__SealResponse);

	/// Web service operation 'Unseal' (returns error code or SOAP_OK)
	virtual	int Unseal(_ns4__Unseal *ns4__Unseal, _ns4__UnsealResponse *ns4__UnsealResponse);

	/// Web service operation 'Reseal' (returns error code or SOAP_OK)
	virtual	int Reseal(_ns4__Reseal *ns4__Reseal, _ns4__ResealResponse *ns4__ResealResponse);

	/// Web service operation 'Reclassify' (returns error code or SOAP_OK)
	virtual	int Reclassify(_ns4__Reclassify *ns4__Reclassify, _ns4__ReclassifyResponse *ns4__ReclassifyResponse);

	/// Web service operation 'Peek' (returns error code or SOAP_OK)
	virtual	int Peek(_ns4__Peek *ns4__Peek, _ns4__PeekResponse *ns4__PeekResponse);

	/// Web service operation 'ValidatedPeek' (returns error code or SOAP_OK)
	virtual	int ValidatedPeek(_ns4__ValidatedPeek *ns4__ValidatedPeek, _ns4__ValidatedPeekResponse *ns4__ValidatedPeekResponse);
};
#endif
