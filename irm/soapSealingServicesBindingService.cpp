/* soapSealingServicesBindingService.cpp
   Generated by gSOAP 2.7.16 from IRM.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "soapSealingServicesBindingService.h"

SealingServicesBindingService::SealingServicesBindingService()
{	SealingServicesBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

SealingServicesBindingService::SealingServicesBindingService(const struct soap &_soap) :soap(_soap)
{ }

SealingServicesBindingService::SealingServicesBindingService(soap_mode iomode)
{	SealingServicesBindingService_init(iomode, iomode);
}

SealingServicesBindingService::SealingServicesBindingService(soap_mode imode, soap_mode omode)
{	SealingServicesBindingService_init(imode, omode);
}

SealingServicesBindingService::~SealingServicesBindingService()
{ }

void SealingServicesBindingService::SealingServicesBindingService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns3", "http://xmlns.oracle.com/irm/system", NULL, NULL},
	{"ns1", "http://xmlns.oracle.com/irm/core", NULL, NULL},
	{"ns2", "http://xmlns.oracle.com/irm/content", NULL, NULL},
	{"ns5", "http://xmlns.oracle.com/irm/classifications", NULL, NULL},
	{"ns6", "http://xmlns.oracle.com/irm/rights", NULL, NULL},
	{"ns4", "http://xmlns.oracle.com/irm/content/wsdl", NULL, NULL},
	{"ns7", "http://xmlns.oracle.com/irm/rights/wsdl", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	this->namespaces = namespaces;
};

void SealingServicesBindingService::destroy()
{	soap_destroy(this);
	soap_end(this);
}

SealingServicesBindingService *SealingServicesBindingService::copy()
{	SealingServicesBindingService *dup = SOAP_NEW_COPY(SealingServicesBindingService(*(struct soap*)this));
	return dup;
}

int SealingServicesBindingService::soap_close_socket()
{	return soap_closesock(this);
}

int SealingServicesBindingService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this, string, detailXML);
}

int SealingServicesBindingService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this, subcodeQName, string, detailXML);
}

int SealingServicesBindingService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this, string, detailXML);
}

int SealingServicesBindingService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this, subcodeQName, string, detailXML);
}

void SealingServicesBindingService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
void SealingServicesBindingService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}

char *SealingServicesBindingService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

void SealingServicesBindingService::soap_noheader()
{	header = NULL;
}

int SealingServicesBindingService::run(int port)
{	if (soap_valid_socket(bind(NULL, port, 100)))
	{	for (;;)
		{	if (!soap_valid_socket(accept()))
				return this->error;
			(void)serve();
			soap_destroy(this);
			soap_end(this);
		}
	}
	else
		return this->error;
	return SOAP_OK;
}

SOAP_SOCKET SealingServicesBindingService::bind(const char *host, int port, int backlog)
{	return soap_bind(this, host, port, backlog);
}

SOAP_SOCKET SealingServicesBindingService::accept()
{	return soap_accept(this);
}

int SealingServicesBindingService::serve()
{
#ifndef WITH_FASTCGI
	unsigned int k = this->max_keep_alive;
#endif
	do
	{	soap_begin(this);
#ifdef WITH_FASTCGI
		if (FCGI_Accept() < 0)
		{
			this->error = SOAP_EOF;
			return soap_send_fault(this);
		}
#endif

		soap_begin(this);

#ifndef WITH_FASTCGI
		if (this->max_keep_alive > 0 && !--k)
			this->keep_alive = 0;
#endif

		if (soap_begin_recv(this))
		{	if (this->error < SOAP_STOP)
			{
#ifdef WITH_FASTCGI
				soap_send_fault(this);
#else 
				return soap_send_fault(this);
#endif
			}
			soap_closesock(this);

			continue;
		}

		if (soap_envelope_begin_in(this)
		 || soap_recv_header(this)
		 || soap_body_begin_in(this)
		 || dispatch() || (this->fserveloop && this->fserveloop(this)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this);
#else
			return soap_send_fault(this);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(this);
		soap_end(this);
	} while (1);
#else
	} while (this->keep_alive);
#endif
	return SOAP_OK;
}

static int serve___ns4__Seal(SealingServicesBindingService*);
static int serve___ns4__Unseal(SealingServicesBindingService*);
static int serve___ns4__Reseal(SealingServicesBindingService*);
static int serve___ns4__Reclassify(SealingServicesBindingService*);
static int serve___ns4__Peek(SealingServicesBindingService*);
static int serve___ns4__ValidatedPeek(SealingServicesBindingService*);

int SealingServicesBindingService::dispatch()
{	if (soap_peek_element(this))
		return this->error;
	if (!soap_match_tag(this, this->tag, "ns4:Seal"))
		return serve___ns4__Seal(this);
	if (!soap_match_tag(this, this->tag, "ns4:Unseal"))
		return serve___ns4__Unseal(this);
	if (!soap_match_tag(this, this->tag, "ns4:Reseal"))
		return serve___ns4__Reseal(this);
	if (!soap_match_tag(this, this->tag, "ns4:Reclassify"))
		return serve___ns4__Reclassify(this);
	if (!soap_match_tag(this, this->tag, "ns4:Peek"))
		return serve___ns4__Peek(this);
	if (!soap_match_tag(this, this->tag, "ns4:ValidatedPeek"))
		return serve___ns4__ValidatedPeek(this);
	return this->error = SOAP_NO_METHOD;
}

static int serve___ns4__Seal(SealingServicesBindingService *soap)
{	struct __ns4__Seal soap_tmp___ns4__Seal;
	_ns4__SealResponse ns4__SealResponse;
	ns4__SealResponse.soap_default(soap);
	soap_default___ns4__Seal(soap, &soap_tmp___ns4__Seal);
	soap->encodingStyle = NULL;
	if (!soap_get___ns4__Seal(soap, &soap_tmp___ns4__Seal, "-ns4:Seal", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->Seal(soap_tmp___ns4__Seal.ns4__Seal, &ns4__SealResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns4__SealResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns4__SealResponse.soap_put(soap, "ns4:SealResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns4__SealResponse.soap_put(soap, "ns4:SealResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns4__Unseal(SealingServicesBindingService *soap)
{	struct __ns4__Unseal soap_tmp___ns4__Unseal;
	_ns4__UnsealResponse ns4__UnsealResponse;
	ns4__UnsealResponse.soap_default(soap);
	soap_default___ns4__Unseal(soap, &soap_tmp___ns4__Unseal);
	soap->encodingStyle = NULL;
	if (!soap_get___ns4__Unseal(soap, &soap_tmp___ns4__Unseal, "-ns4:Unseal", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->Unseal(soap_tmp___ns4__Unseal.ns4__Unseal, &ns4__UnsealResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns4__UnsealResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns4__UnsealResponse.soap_put(soap, "ns4:UnsealResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns4__UnsealResponse.soap_put(soap, "ns4:UnsealResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns4__Reseal(SealingServicesBindingService *soap)
{	struct __ns4__Reseal soap_tmp___ns4__Reseal;
	_ns4__ResealResponse ns4__ResealResponse;
	ns4__ResealResponse.soap_default(soap);
	soap_default___ns4__Reseal(soap, &soap_tmp___ns4__Reseal);
	soap->encodingStyle = NULL;
	if (!soap_get___ns4__Reseal(soap, &soap_tmp___ns4__Reseal, "-ns4:Reseal", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->Reseal(soap_tmp___ns4__Reseal.ns4__Reseal, &ns4__ResealResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns4__ResealResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns4__ResealResponse.soap_put(soap, "ns4:ResealResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns4__ResealResponse.soap_put(soap, "ns4:ResealResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns4__Reclassify(SealingServicesBindingService *soap)
{	struct __ns4__Reclassify soap_tmp___ns4__Reclassify;
	_ns4__ReclassifyResponse ns4__ReclassifyResponse;
	ns4__ReclassifyResponse.soap_default(soap);
	soap_default___ns4__Reclassify(soap, &soap_tmp___ns4__Reclassify);
	soap->encodingStyle = NULL;
	if (!soap_get___ns4__Reclassify(soap, &soap_tmp___ns4__Reclassify, "-ns4:Reclassify", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->Reclassify(soap_tmp___ns4__Reclassify.ns4__Reclassify, &ns4__ReclassifyResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns4__ReclassifyResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns4__ReclassifyResponse.soap_put(soap, "ns4:ReclassifyResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns4__ReclassifyResponse.soap_put(soap, "ns4:ReclassifyResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns4__Peek(SealingServicesBindingService *soap)
{	struct __ns4__Peek soap_tmp___ns4__Peek;
	_ns4__PeekResponse ns4__PeekResponse;
	ns4__PeekResponse.soap_default(soap);
	soap_default___ns4__Peek(soap, &soap_tmp___ns4__Peek);
	soap->encodingStyle = NULL;
	if (!soap_get___ns4__Peek(soap, &soap_tmp___ns4__Peek, "-ns4:Peek", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->Peek(soap_tmp___ns4__Peek.ns4__Peek, &ns4__PeekResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns4__PeekResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns4__PeekResponse.soap_put(soap, "ns4:PeekResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns4__PeekResponse.soap_put(soap, "ns4:PeekResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns4__ValidatedPeek(SealingServicesBindingService *soap)
{	struct __ns4__ValidatedPeek soap_tmp___ns4__ValidatedPeek;
	_ns4__ValidatedPeekResponse ns4__ValidatedPeekResponse;
	ns4__ValidatedPeekResponse.soap_default(soap);
	soap_default___ns4__ValidatedPeek(soap, &soap_tmp___ns4__ValidatedPeek);
	soap->encodingStyle = NULL;
	if (!soap_get___ns4__ValidatedPeek(soap, &soap_tmp___ns4__ValidatedPeek, "-ns4:ValidatedPeek", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->ValidatedPeek(soap_tmp___ns4__ValidatedPeek.ns4__ValidatedPeek, &ns4__ValidatedPeekResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns4__ValidatedPeekResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns4__ValidatedPeekResponse.soap_put(soap, "ns4:ValidatedPeekResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns4__ValidatedPeekResponse.soap_put(soap, "ns4:ValidatedPeekResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
