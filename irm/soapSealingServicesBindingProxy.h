/* soapSealingServicesBindingProxy.h
   Generated by gSOAP 2.7.16 from IRM.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapSealingServicesBindingProxy_H
#define soapSealingServicesBindingProxy_H
#include "soapH.h"

class SOAP_CMAC SealingServicesBindingProxy : public soap
{ public:
	/// Endpoint URL of service 'SealingServicesBindingProxy' (change as needed)
	const char *soap_endpoint;
	/// Constructor
	SealingServicesBindingProxy();
	/// Constructor with copy of another engine state
	SealingServicesBindingProxy(const struct soap&);
	/// Constructor with engine input+output mode control
	SealingServicesBindingProxy(soap_mode iomode);
	/// Constructor with engine input and output mode control
	SealingServicesBindingProxy(soap_mode imode, soap_mode omode);
	/// Destructor frees deserialized data
	virtual	~SealingServicesBindingProxy();
	/// Initializer used by constructors
	virtual	void SealingServicesBindingProxy_init(soap_mode imode, soap_mode omode);
	/// Delete all deserialized data (uses soap_destroy and soap_end)
	virtual	void destroy();
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Get SOAP Fault structure (NULL when absent)
	virtual	const SOAP_ENV__Fault *soap_fault();
	/// Get SOAP Fault string (NULL when absent)
	virtual	const char *soap_fault_string();
	/// Get SOAP Fault detail as string (NULL when absent)
	virtual	const char *soap_fault_detail();
	/// Force close connection (normally automatic, except for send_X ops)
	virtual	int soap_close_socket();
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
	virtual	void soap_stream_fault(std::ostream&);
	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif

	/// Web service operation 'Seal' (returns error code or SOAP_OK)
	virtual	int Seal(_ns4__Seal *ns4__Seal, _ns4__SealResponse *ns4__SealResponse);

	/// Web service operation 'Unseal' (returns error code or SOAP_OK)
	virtual	int Unseal(_ns4__Unseal *ns4__Unseal, _ns4__UnsealResponse *ns4__UnsealResponse);

	/// Web service operation 'Reseal' (returns error code or SOAP_OK)
	virtual	int Reseal(_ns4__Reseal *ns4__Reseal, _ns4__ResealResponse *ns4__ResealResponse);

	/// Web service operation 'Reclassify' (returns error code or SOAP_OK)
	virtual	int Reclassify(_ns4__Reclassify *ns4__Reclassify, _ns4__ReclassifyResponse *ns4__ReclassifyResponse);

	/// Web service operation 'Peek' (returns error code or SOAP_OK)
	virtual	int Peek(_ns4__Peek *ns4__Peek, _ns4__PeekResponse *ns4__PeekResponse);

	/// Web service operation 'ValidatedPeek' (returns error code or SOAP_OK)
	virtual	int ValidatedPeek(_ns4__ValidatedPeek *ns4__ValidatedPeek, _ns4__ValidatedPeekResponse *ns4__ValidatedPeekResponse);
};
#endif
